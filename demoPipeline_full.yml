# Default parameter values.
parameters:
  dependsOn: []
  environment: 'Dev'
  deploymentName:
  terraformVersion: 'latest'
  workingDirectory: 'tf-deploy'
  artifactSuffix: $(Build.BuildNumber)
  knownHosts:
  sshPublicKey:
  sshPassphrase:
  sshSecureFile:
  sp_client_id:
  sp_client_secret:
  subscription_id:
  tenant_id:
  terraformConfigPath: tf-deploy
  tfvarsPath: ../config/Dev/environment.tfvars
  backendPath: ../config/Dev/backend.tf
  buildType: current
  downloadType: single
  downloadPath: '$(System.ArtifactsDirectory)'


stages:
- stage: 'TerraformPlan_${{parameters.environment }}_${{ parameters.deploymentName }}'
  dependsOn: ${{ parameters.dependsOn }}
  jobs:
  - job: TerraformPlan
    continueOnError: false
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: ${{ parameters.knownHosts }}
        sshPublicKey: ${{ parameters.sshPublicKey }}
        sshPassphrase: ${{ parameters.sshPassphrase }}
        sshKeySecureFile: ${{ parameters.sshSecureFile }}

    - task: TerraformInstaller@0
      displayName: 'install Terraform'
      inputs:
        workingDirectory: '${{ parameters.workingDirectory }}'
        terraformVersion: ${{ parameters.terraformVersion }}

    - task: CmdLine@2
      displayName: "Initialise Terraform deployment"
      env:
        ARM_CLIENT_ID:       ${{ parameters.sp_client_id }}
        ARM_CLIENT_SECRET:   ${{ parameters.sp_client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ parameters.subscription_id }}
        ARM_TENANT_ID:       ${{ parameters.tenant_id }}
      inputs:
          workingDirectory: ${{ parameters.workingDirectory }}
          script: |
            printenv
            terraform init -var-file=${{ parameters.tfvarsPath }} -backend-config=${{ parameters.backendPath }}

    - task: TerraformCLI@0
      name: TerraformPlan
      env:
        ARM_CLIENT_ID:       ${{ parameters.sp_client_id }}
        ARM_CLIENT_SECRET:   ${{ parameters.sp_client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ parameters.subscription_id }}
        ARM_TENANT_ID:       ${{ parameters.tenant_id }}
      inputs:
        command: 'plan'
        workingDirectory: ${{ parameters.workingDirectory }}
        commandOptions: '-var-file=${{ parameters.tfvarsPath }} -out=${{ parameters.environment }}-${{ parameters.deploymentName }}-$(Build.BuildNumber).tfplan -compact-warnings -detailed-exitcode'
        publishPlanResults: '${{ parameters.environment }}-${{ parameters.deploymentName }}-$(Build.BuildNumber)-plan'

    - script: |
        echo $HASCHANGES
        echo "##vso[task.setvariable variable=PLAN_HAS_CHANGES;isOutput=true;]$HASCHANGES"
      name: SetPlanOutputs
      displayName: 'Set Plan Output var'
      workingDirectory: ${{ parameters.workingDirectory }}
      env: 
        HASCHANGES: $(TERRAFORM_PLAN_HAS_CHANGES)

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        TargetFolder: '$(build.artifactstagingdirectory)'
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact ${{ parameters.environment }}-${{ parameters.artifactSuffix }}'
      inputs:
        ArtifactName: '${{ parameters.environment }}-${{ parameters.artifactSuffix }}'

    - task: CmdLine@2
      name: SetArtifactOutputVar
      displayName: 'Set Artifact Name Output Variable'
      env:
        ARTIFACTNAME: '${{ parameters.environment }}-${{ parameters.artifactSuffix }}'
      inputs:
        workingDirectory: ${{ parameters.workingDirectory }}
        script: |
          echo ##vso[task.setvariable variable=ARTIFACT_NAME;isOutput=true;]$(ARTIFACTNAME)
          echo ${{ variables.ARTIFACT_NAME }

# Deployment Stage
- stage: 'TerraformApply_${{parameters.environment }}_${{ parameters.deploymentName }}'
  dependsOn: ${{ parameters.dependsOn }}
  jobs:
  - deployment: 'TerraformApply'
    dependsOn: ['TerraformPlan']
    displayName: 'Terraform apply ${{parameters.environment }}_${{ parameters.deploymentName }}'
    environment: ${{ parameters.environment }}
    strategy: 
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            displayName: "check directory"
            inputs:
              workingDirectory: '../${{ parameters.environment }}-${{ parameters.artifactSuffix }}/${{ parameters.terraformConfigPath }}'
              script: |
                pwd
                ls
          - task: TerraformInstaller@0
            displayName: 'install Terraform'
            inputs:
              workingDirectory: '${{ parameters.workingDirectory }}'
              terraformVersion: ${{ parameters.terraformVersion }}

          - task: CmdLine@2
            displayName: "Initialise Terraform deployment"
            env:
              ARM_CLIENT_ID:       ${{ parameters.sp_client_id }}
              ARM_CLIENT_SECRET:   ${{ parameters.sp_client_secret }}
              ARM_SUBSCRIPTION_ID: ${{ parameters.subscription_id }}
              ARM_TENANT_ID:       ${{ parameters.tenant_id }}
            inputs:
              workingDirectory: '../${{ parameters.environment }}-${{ parameters.artifactSuffix }}/${{ parameters.terraformConfigPath }}'
              script: terraform init -var-file=${{ parameters.tfvarsPath }} -backend-config=${{ parameters.backendPath }}      

          - task: CmdLine@2
            displayName: "Deploy configuration described in the tfplan file."
            env:
              ARM_CLIENT_ID:       ${{ parameters.sp_client_id }}
              ARM_CLIENT_SECRET:   ${{ parameters.sp_client_secret }}
              ARM_SUBSCRIPTION_ID: ${{ parameters.subscription_id }}
              ARM_TENANT_ID:       ${{ parameters.tenant_id }}
            inputs:
              workingDirectory: '../${{ parameters.environment }}-${{ parameters.artifactSuffix }}/${{ parameters.terraformConfigPath }}'
              script: |
                pwd
                ls
                terraform apply ${{ parameters.environment }}-${{ parameters.deploymentName }}-$(Build.BuildNumber).tfplan